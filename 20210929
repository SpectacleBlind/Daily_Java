
class Solution {
    public int[] solution(long n) {
        String num = "" + n;  
        int[] answer = new int[num.length()];
        int count = 0; 
        
        while(n>0){
        answer[count] = (int)n%10;
        n /=10;
        count++;
}
        return answer;
    }
}










자리수 더하기


import java.util.*;

public class Solution {
    
    public static void main(String [] args){
        Scanner in = new Scanner(System.in);
        int number = in.nextInt();
        solution(number);
        
        
    }
    public static int solution(int n) {
        int answer = 0;
        int number = n;
        
        while (number > 0){
            answer += number%10;
            number = number/10;
        }
        System.out.println(answer);

        return answer;
    }
}





import java.util.*;

public class Solution {
    public int solution(int n) {
        int answer = 0;
        
while(n >0){
answer += n%10;
n /= 10; 
}
        return answer;
    }
}



이상한 문자 만들기

class Solution {
    public String solution(String s) {
        String answer = "";
        String[] arr = s.split("");
        int index = 0;
        for(int i = 0; i<arr.length; i++){
            if(arr[i].equals(" ")){
                index = 0;
            }
            else{
                arr[i] = index%2 == 0 ? arr[i].toUpperCase() : arr[i].toLowerCase();
                index++;
         }
        answer += arr[i];
        }
        return answer;
    }
}










class Solution {
    public String solution(String s) {
        s = s.toLowerCase(); //전체 소문자 
        String answer = "";
        String[] temp = s.split(""); //Arrays로 넣을때 한칸씩 다 넣는 것
        int count = 0;        
        for(int i = 0; i<temp.length;i++){
            if(count%2 == 0) {
                temp[i] = temp[i].toUpperCase();
                }
            count++;
            if(temp[i].equals(" ")) count = 0; //Arrays 안에서 값 비교 하려면 .equals() 로 해야한다!
         answer += temp[i];
        }
        return answer;
    }
}

테스트 1 〉	통과 (1.33ms, 75.3MB)
테스트 2 〉	통과 (1.33ms, 78.5MB)
테스트 3 〉	통과 (1.28ms, 72.5MB)
테스트 4 〉	통과 (1.88ms, 72.1MB)
테스트 5 〉	통과 (1.51ms, 71.9MB)
테스트 6 〉	통과 (1.37ms, 78.7MB)
테스트 7 〉	통과 (1.20ms, 77.8MB)
테스트 8 〉	통과 (1.81ms, 76.1MB)
테스트 9 〉	통과 (1.42ms, 73.7MB)
테스트 10 〉	통과 (2.00ms, 77.8MB)
테스트 11 〉	통과 (1.97ms, 73.3MB)
테스트 12 〉	통과 (1.66ms, 77.7MB)
테스트 13 〉	통과 (1.28ms, 83.8MB)
테스트 14 〉	통과 (1.46ms, 77.3MB)
테스트 15 〉	통과 (1.41ms, 79.2MB)
테스트 16 〉	통과 (1.75ms, 73.3MB)

약수의 합



class Solution {
    public int solution(int n) {
        int answer = 0;
        for(int i = 1 ; i <= n; i++){
            if (n%i == 0){
                answer += i;
            } 
        }
        return answer;
    }
}

시저 암호
class Solution {
    public String solution(String s, int n) {
        String answer = "";
        for(int i=0; i<s.length(); i++) {
			char point = s.charAt(i);
			
             if(point >= 'a' && point <= 'z') {
				if(point + n > 'z') answer += (char)(point + n - 26);
				else answer += (char)(point + n);
			}
			else if(point >= 'A' && point <= 'Z') {
				if(point + n > 'Z') answer += (char)(point + n-26);
				else answer += (char)(point + n);
			}
			else answer += (char)point;

		}
		

테스트 1 〉	통과 (10.39ms, 75MB)
테스트 2 〉	통과 (12.46ms, 59.2MB)
테스트 3 〉	통과 (11.09ms, 60.9MB)
테스트 4 〉	통과 (15.27ms, 75.6MB)
테스트 5 〉	통과 (9.71ms, 76.8MB)
테스트 6 〉	통과 (13.27ms, 72.1MB)
테스트 7 〉	통과 (10.88ms, 75.7MB)
테스트 8 〉	통과 (9.35ms, 72MB)
테스트 9 〉	통과 (13.68ms, 72.5MB)
테스트 10 〉	통과 (11.96ms, 70.9MB)
테스트 11 〉	통과 (11.61ms, 62.1MB)
테스트 12 〉	통과 (12.18ms, 73.2MB)
테스트 13 〉	통과 (26.39ms, 78.7MB)

class Caesar {
    String caesar(String s, int n) {
        String result = "";
    
    for (int i = 0; i < s.length(); i++) {
      char ch = s.charAt(i);
      if (Character.isLowerCase(ch)) {
        ch = (char) ((ch - 'a' + n) % 26 + 'a'); // char로 변환하는 것 유의
      } else if (Character.isUpperCase(ch)) {
        ch = (char) ((ch - 'A' + n) % 26 + 'A');
      }
      result += ch;
    }
        return result;
    }



문자열 정수로 바꾸기

class Solution {
    public int solution(String s) {
    int answer = 0;
        StringBuilder sb= new StringBuilder();
        if(s.charAt(0) == '+'){
            for(int i = 1; i<s.length(); i++){
                sb.append(s.charAt(i));
            }
            answer = Integer.parseInt(sb.toString());
        }
        else if(s.charAt(0) == '-'){
            for(int i = 1; i<s.length(); i++){
                sb.append(s.charAt(i));
            }
             answer = Integer.parseInt(sb.toString())*-1;
        }
        else {
                    for(int i = 0; i<s.length(); i++){
                sb.append(s.charAt(i));
            }
                        answer = Integer.parseInt(sb.toString());
        }
        return answer;
    }
}
테스트 1 〉	통과 (0.08ms, 71.7MB)
테스트 2 〉	통과 (0.04ms, 58.2MB)
테스트 3 〉	통과 (0.04ms, 69.9MB)
테스트 4 〉	통과 (0.04ms, 59.9MB)
테스트 5 〉	통과 (0.05ms, 70.5MB)
테스트 6 〉	통과 (0.04ms, 68.6MB)
테스트 7 〉	통과 (0.05ms, 75.6MB)
테스트 8 〉	통과 (0.05ms, 67.8MB)
테스트 9 〉	통과 (0.04ms, 71.7MB)
테스트 10 〉	통과 (0.10ms, 71.8MB)
테스트 11 〉	통과 (0.04ms, 60MB)
테스트 12 〉	통과 (0.03ms, 72.7MB)
테스트 13 〉	통과 (0.04ms, 72.2MB)
테스트 14 〉	통과 (0.04ms, 71.7MB)
테스트 15 〉	통과 (0.04ms, 71.7MB)

class Solution {
    public int solution(String s) {
        int answer = 0;
        if(s.charAt(0) == '-'){
                answer = Integer.parseInt(s.substring(1))*(-1);
            }
        else if(s.charAt(0) == '+'){
                answer = Integer.parseInt(s.substring(1));
            }
        else answer = Integer.parseInt(s);
        
        return answer;
    }
}

테스트 1 〉	통과 (0.03ms, 77.7MB)
테스트 2 〉	통과 (0.03ms, 81MB)
테스트 3 〉	통과 (0.02ms, 73.6MB)
테스트 4 〉	통과 (0.03ms, 73.9MB)
테스트 5 〉	통과 (0.03ms, 77.8MB)
테스트 6 〉	통과 (0.03ms, 69.6MB)
테스트 7 〉	통과 (0.03ms, 71.9MB)
테스트 8 〉	통과 (0.02ms, 71.6MB)
테스트 9 〉	통과 (0.02ms, 76.4MB)
테스트 10 〉	통과 (0.03ms, 61.7MB)
테스트 11 〉	통과 (0.02ms, 70.2MB)
테스트 12 〉	통과 (0.03ms, 73.7MB)
테스트 13 〉	통과 (0.02ms, 74.7MB)
테스트 14 〉	통과 (0.02ms, 74.9MB)
테스트 15 〉	통과 (0.03ms, 72.6MB)
